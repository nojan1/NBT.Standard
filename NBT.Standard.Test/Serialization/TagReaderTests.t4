﻿<#@ include file="..\..\NBT.Standard\NbtGeneratorData.t4" #>using System.IO;
using Xunit;
using NBT.Serialization;

namespace NBT.Test.Serialization
{
  partial class <#=readerTypeName #>Tests
  {
<# for (int i = 0; i < netTypeNames.Length; i++)
    {
      string nbtName;
      object testData;
      string name;

      name = netTypeNames[i];
      nbtName = nbtTypeNames[i];
      testData = tagTestData[i];

      if (i != tagTypeEnd)
      {
        //if (i != tagTypeList && i != tagTypeCompound)
        {
          #>
    [Fact]
    public void Read<#=nbtName #>_test()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        <#=name #> expected;
        <#=name #> actual;

        writer = this.CreateWriter(stream);

        expected = <#=testData #>;

        writer.WriteStartDocument();
        writer.WriteTag("value", expected);
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        reader.ReadTagType();
        reader.ReadTagName();

        // act
        actual = reader.Read<#=nbtName #>();

        // assert
        Assert.Equal(expected, actual);
      }
    }

    [Fact]
    public void ReadList_of_<#=nbtName.ToLower() #>_test()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;
        <#=name #> expected1;
        <#=name #> expected2;
        TagCollection actual;

        writer = this.CreateWriter(stream);

        expected1 = <#=testData #>;
        expected2 = <#=altTagTestData[i] #>;

        writer.WriteStartDocument();
        writer.WriteStartTag("list", TagType.List, TagType.<#=nbtName #>, 2);
        writer.WriteTag(expected1);
        writer.WriteTag(expected2);
        writer.WriteEndTag();
        writer.WriteEndDocument();

        stream.Position = 0;

        reader = this.CreateReader(stream);
        reader.ReadTagType();
        reader.ReadTagName();

        // act
        actual = reader.ReadList();

        // assert
        Assert.Equal(2, actual.Count);
        Assert.Equal(expected1, actual[0].GetValue());
        Assert.Equal(expected2, actual[1].GetValue());
      }
    }

<#
        }
      }
    }
#>
  }
}