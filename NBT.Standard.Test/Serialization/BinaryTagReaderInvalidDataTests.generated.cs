﻿﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.IO;
using Xunit;
using NBT.Serialization;

namespace NBT.Test.Serialization
{
  partial class BinaryTagReaderTests
  {
    [Fact]
    public void ReadByte_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadByte());
      }
    }

    [Fact]
    public void ReadShort_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadShort());
      }
    }

    [Fact]
    public void ReadInt_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadInt());
      }
    }

    [Fact]
    public void ReadLong_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadLong());
      }
    }

    [Fact]
    public void ReadFloat_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadFloat());
      }
    }

    [Fact]
    public void ReadDouble_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadDouble());
      }
    }

    [Fact]
    public void ReadByteArray_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;

        reader = this.CreateReader(stream);
        writer = new BinaryTagWriter(stream);

        // TODO: WriteValue is currently protected
        //writer.WriteValue(100);
        this.WriteValue(stream, 100);

        stream.Position = 0;

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadByteArray());
      }
    }

        [Fact]
    public void ReadString_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;

        reader = this.CreateReader(stream);
        writer = new BinaryTagWriter(stream);

        // TODO: WriteValue is currently protected
        //writer.WriteValue((short)100);
        this.WriteValue(stream, (short)100);

        stream.Position = 0;

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadString());
      }
    }

        [Fact]
    public void ReadList_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadList());
      }
    }

    [Fact]
    public void ReadCompound_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;

        reader = this.CreateReader(stream);

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadCompound());
      }
    }

    [Fact]
    public void ReadIntArray_throws_exception_if_data_invalid()
    {
      using (MemoryStream stream = new MemoryStream())
      {
        // arrange
        TagReader reader;
        TagWriter writer;

        reader = this.CreateReader(stream);
        writer = new BinaryTagWriter(stream);

        // TODO: WriteValue is currently protected
        //writer.WriteValue(100);
        this.WriteValue(stream, 100);

        stream.Position = 0;

        // act
		Assert.Throws<InvalidDataException>(() => reader.ReadIntArray());
      }
    }

      }
}