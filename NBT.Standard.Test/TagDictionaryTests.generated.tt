﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="..\NBT.Standard\NbtGeneratorData.t4" #>
<#@ output extension=".cs" #>using System;
using Xunit;

namespace NBT.Test
{
  public partial class TagDictionaryTests : TestBase
  {
<# for (int i = 0; i < netTypeNames.Length; i++)
    {
      string name;
      string nbtName;
      string tagName;

      name = netTypeNames[i];
      nbtName = nbtTypeNames[i];
      tagName = "Tag" + nbtName;

      if (name != null)
      {
        #>
    [Fact]
    public void Add_adds_named_<#=nbtName.ToLower() #>()
    {
      // arrange
      TagDictionary target;
      <#=tagName #> actual;
      <#=name #> expected;
      string expectedName;

      expectedName = "Alpha<#=nbtName #>";
      expected = <#=tagTestData[i] #>;

      target = new TagDictionary();

      // act
      actual = target.Add(expectedName, expected);

      // assert
      Assert.NotNull(actual);
      Assert.True(target.Contains(expectedName));
      Assert.Equal(expectedName, actual.Name);
      Assert.Equal(expected, actual.Value);
    }

    [Fact]
    public void Add_adds_named_<#=nbtName.ToLower() #>_object()
    {
      // arrange
      TagDictionary target;
      Tag actual;
      <#=name #> expected;
      string expectedName;

      expectedName = "Beta<#=nbtName #>";
      expected = <#=tagTestData[i] #>;

      target = new TagDictionary();

      // act
      actual = target.Add(expectedName, (object)expected);

      // assert
      Assert.NotNull(actual);
      Assert.True(target.Contains(expectedName));
      Assert.Equal(expectedName, actual.Name);
      Assert.Equal(expected, actual.GetValue());
    }

    <#
      }
    }
#>

<# for (int i = 0; i < secondaryDataTypes.Length; i++)
    {
      string name;
      string nbtName;
      string tagName;
      string mappedType;

      name = secondaryDataTypes[i];
      nbtName = secondaryDataTypeMappings[i];
      tagName = "Tag" + nbtName;
      mappedType = secondaryDataTypeMappedTypes[i];

      if (name != null)
      {
        #>
    [Fact]
    public void Add_adds_named_<#=name.ToLower() #>()
    {
      // arrange
      TagDictionary target;
      <#=tagName #> actual;
      <#=mappedType #> expected;
      <#=name #> value;
      string expectedName;

      expectedName = "Alpha<#=nbtName #>";
      expected = <#=secondaryDataTypeTranslatedTestData[i] #>;
      value = <#=secondaryDataTypeTestData[i] #>;

      target = new TagDictionary();

      // act
      actual = target.Add(expectedName, value);

      // assert
      Assert.NotNull(actual);
      Assert.True(target.Contains(expectedName));
      Assert.Equal(expectedName, actual.Name);
      Assert.Equal(expected, actual.Value);
    }

    [Fact]
    public void Add_adds_named_<#=name.ToLower() #>_object()
    {
      // arrange
      TagDictionary target;
      Tag actual;
      <#=mappedType #> expected;
      string expectedName;
      <#=name #> value;

      expectedName = "Beta<#=nbtName #>";
      expected = <#=secondaryDataTypeTranslatedTestData[i] #>;
      value = <#=secondaryDataTypeTestData[i] #>;

      target = new TagDictionary();

      // act
      actual = target.Add(expectedName, (object)value);

      // assert
      Assert.NotNull(actual);
      Assert.True(target.Contains(expectedName));
      Assert.Equal(expectedName, actual.Name);
      Assert.Equal(expected, actual.GetValue());
    }

    <#
      }
    }
#>
  }
}
